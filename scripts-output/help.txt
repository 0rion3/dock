# This file is printed in response to invoking `dock -h` command, which stands
# for "dock --help", a longer option we, unfortunately, don't currently have.

Basic Usage
===========

dock [IMAGE_NAME] [CONTAINER_NAME]
dock [IMAGE_NAME]
dock [CONTAINER_NAME]
dock

CLI OPTIONS
===========
dock provides a number of options with regards to mounting/not-mounting
directories, giving containers privileged access, and some other things:

 -u [USER]
    ssh username to use when connecting to the container via ssh. Defaults
    to "docker", but sometimes might want "root". Although, in that case,
    it's easier to define an alias:

      alias dock-r="dock -u root"

 -r connect as root (shorthand for for `dock -u root`)

 -v [PATH_ON_HOST:PATH_ON_GUEST[:ro]]
    Mounts additional directories into the Docker container. Format is
    the same as in Docker - consult Docker manual

 -t [OPTIONS]
    Defines some ssh connection options. Currently there's just one,
    which is the theme for the terminal to be set. ATTENTION: works ONLY
    in Tilix terminal for now, because that's what I use, and I have not
    tested it in other Terminals

 -p
    Run docker container with the
    --privileged flag. More info can be found here:
    https://www.redhat.com/sysadmin/privileged-flag-container-engines. It
    helps with setting up Wireguard in particular.

 -n
    Create new container regardless of whether there's already a container
    with the provided name. This is only marginally useful.

 -M
    DO NOT mount whatever is specified in the
    $DEFAULT_MOUNT_OPTIONS. Current directory would still be mounted,
    so use -H to prevent mounting it.

 -H
    By default, current directory from which the dock script is launched
    will be mounted to ~/main inside the container. This option prevents
    it, but keeps all the other default mount options.

 -S
    Don't automatically connect to the container via ssh after it's
    started. The DEFAULT IS TO CONNECT, so you'll immediately be inside
    the container in your terminal, unless this option is passed. This
    option is useful if you want to start your container, with, say,
    a database, but there isn't a point to connect to the container
    yourself, as you're not intending to do anything with it as a user.

 -d
    Print debug information

 -y
    Dry run: just show what would be the different variables involved in
    creating, starting and connecting to containers and the images that
    are either used to create containers or which existing containers are
    based off. At this point it will print the same info as when you use
    the "debug" flag -d, only without proceeding with the actions.

 -I
    Write line to include in profile script (e.g., .bashrc). For example:
       dock -I >> ~/.bashrc

    or inside file:
       dock -I >> /tmp/dock-alias$$.tmp source /tmp/dock-alias$$.tmp
       rm /tmp/dock-alias$$.tmp

 -l
   Lists currently running or stopped containers formatted with colors
   and proper indentations. For argument --status-column the values "no",
   "hide" and "off" all act do the same - they hide the hide the column.
   If "short" is provided is value only the words "Up" or "Exited" will
   be printed.

   USAGE EXAMPLES:
       dock -l --status-column=hide --image-column=repo,name
       dock -l --status-column=short --image-column=name,tag
       dock -l --status-column=no dock -l --image-column=name
       dock -l

 -h
    Show this help message.
